/*
---------------------------------------------------------------------------------------------------------------
---- COLLECTION -> LIST, QUEUE, DEQUE, SET 
---------------------------------------------------------------------------------------------------------------
*/

/*           --- ИТЕРАЦИЯ ---            */
// НЕ МОЖЕМ ИЗМЕНЯТЬ ПРИ ИТЕРАЦИИ ЕЛЕМЕНТЫ
for (int i = 0; i < colors.size(); i++) {
           String color = colors.get(i);
           printItemList(color);
}
for (String color : colors) {
           printItemList(color);
}

colors.stream().forEach(color -> printItemList(color));
 
colors.stream().forEach(ListExample::printItemList);
 
colors.forEach(color -> printItemList(color));

colors.forEach(ListExample::printItemList);

// МОЖЕМ ИЗМЕНЯТЬ ПРИ ИТЕРАЦИИ ЕЛЕМЕНТЫ
for (Iterator<String> it = colors.iterator(); it.hasNext(); ) {
           String color = it.next();
           printItemList(color);
}

Iterator<String> it = colors.iterator();
  while (it.hasNext()) {
    String color = it.next();
    printItemList(color);
}

/*           --- ИТЕРАЦИЯ ---            */


/*
---------------------------------------------------------------------------------------------------------------
---- COLLECTION -> LIST
---------------------------------------------------------------------------------------------------------------
*/


/*
---------------------------------------------------------------------------------------------------------------
---- COLLECTION -> QUEUE
---------------------------------------------------------------------------------------------------------------
E element(): возвращает, но не удаляет, элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
boolean offer(E obj): добавляет элемент obj в конец очереди. Если элемент удачно добавлен, возвращает true, иначе - false
E peek(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
E poll(): возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
E remove(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
------- DEQUE -------
void addFirst(E obj): добавляет элемент в начало очереди
void addLast(E obj): добавляет элемент obj в конец очереди
E getFirst(): возвращает без удаления элемент из головы очереди. Если очередь пуста, генерирует исключение NoSuchElementException
E getLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, генерирует исключение NoSuchElementException
boolean offerFirst(E obj): добавляет элемент obj в самое начало очереди. Если элемент удачно добавлен, возвращает true, иначе - false
boolean offerLast(E obj): добавляет элемент obj в конец очереди. Если элемент удачно добавлен, возвращает true, иначе - false
E peekFirst(): возвращает без удаления элемент из начала очереди. Если очередь пуста, возвращает значение null
E peekLast(): возвращает без удаления последний элемент очереди. Если очередь пуста, возвращает значение null
E pollFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, возвращает значение null
E pollLast(): возвращает с удалением последний элемент очереди. Если очередь пуста, возвращает значение null
E pop(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
void push(E element): добавляет элемент в самое начало очереди
E removeFirst(): возвращает с удалением элемент из начала очереди. Если очередь пуста, генерирует исключение NoSuchElementException
E removeLast(): возвращает с удалением элемент из конца очереди. Если очередь пуста, генерирует исключение NoSuchElementException
boolean removeFirstOccurrence(Object obj): удаляет первый встреченный элемент obj из очереди. Если удаление произшло, то возвращает true, иначе возвращает false.
boolean removeLastOccurrence(Object obj): удаляет последний встреченный элемент obj из очереди. Если удаление произшло, то возвращает true, иначе возвращает false.
*/



/*
---------------------------------------------------------------------------------------------------------------
---- COLLECTION -> SET 
---------------------------------------------------------------------------------------------------------------


*/



/*
---------------------------------------------------------------------------------------------------------------
---- COLLECTION -> Map
---------------------------------------------------------------------------------------------------------------
*/
